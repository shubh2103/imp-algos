ALGO FOR FINDING STRONGLY CONNECTED COMPONENTS IN A DIRECTED  GRAPH 
// STRONGLY CONNECTED COMPONENTS MEAN A GROUP OF NODES SUCH THAT WE CAN REACH FROM EACH NODE TO EVERY NODE:
// VALID FOR DIRECTED GRAPH (JUST RUN DFS AND FIND NUMBER OF COMPONENTS IN NON-DIRECTED GRAPH):

const static int N = 5*1e3 + 3; 
	stack<int> s;
	bool visited[N];
	void dfs(int v,vector<int> adj[])
	{
	    visited[v] = 1;
	    for(int child:adj[v])
	    {
	        if(visited[child]) continue;
	        dfs(child,adj);
	    }
	    s.push(v);
	}
	void dfs1(int v,vector<int> adj[])
	{
	    visited[v] = 1;
	    for(int child:adj[v])
	    {
	        if(visited[child]) continue;
	        dfs1(child,adj);
	    }
	}
    int kosaraju(int V, vector<int> adj[])
    {
        for(int i = 0;i<V;i++) visited[i] = 0;
        for(int i=0;i<V;i++)
        {
            if(visited[i]) continue;
            dfs(i,adj);
        }
        vector<int> transpose[V];
        for(int i = 0;i<V;i++)
        {
            for(int child:adj[i])
            {
                transpose[child].push_back(i);
            }
        }
        for(int i = 0;i<V;i++) visited[i] = 0;
        int cnt = 0;
        while(!s.empty()){
            int v = s.top();
            s.pop();
            if(visited[v]) continue;
            dfs1(v,transpose);
            cnt++;
        }
        return cnt;
        
    }