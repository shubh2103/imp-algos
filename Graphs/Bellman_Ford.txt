// Given a graph and a source vertex src in graph, find shortest paths from src to all vertices in the given graph. The graph may contain negative weight edges.
//  We have discussed Dijkstra's algorithm for this problem. Dijkstra's algorithm is a Greedy algorithm and time complexity is O((V+E)LogV) (with the use of Fibonacci heap). Dijkstra doesn't work for Graphs with negative weights, Bellman-Ford works for such graphs. Bellman-Ford is also simpler than Dijkstra and suites well for distributed systems. But time complexity of Bellman-Ford is O(VE), which is more than Dijkstra.

// DOESN'T WORK FOR NEGATIVE WEIGHT CYCLE ||NWC|| (CYCLE HAVING NEGATIVE SUM)
// USEFUL IN DETECTING NWC 

// RELAX THE EDGES N-1 TIMES THE RESULTANT DISTANCE ARRAY IS THE FINAL ARRAY 
// IF AFTER N-1 TIMES THE DISTANCE CAHNGES AGAIN UPON RELAXATION THEN THERE EXIST A 
NEGATIVE CYCLE


// MAKE DIST OF SOURCE AS 0 AND OTHER AS INT_MAX;



int x = n-1;    
int m = edges.size();
while(x--)
{
    for(int i=0;i<m;i++)
    {
        int u = edges[i][0];
        int v = edges[i][1];
        int w = edges[i][2];
        if(distance[u]!=INT_MAX)
        {
            ************************************
            if(distance[u] + w < distance[v]){
                distance[v] = distance[u]+w;            THIS IS KNOWN AS RELAXATION
            }
            *************************************
        }
    }
}

