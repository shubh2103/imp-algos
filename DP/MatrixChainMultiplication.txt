#include <bits/stdc++.h>
typedef long long ll;
using namespace std;
#define pb push_back
#define ff first
#define int ll
#define vi vector<int>
#define ss second
#define all(a) a.begin(), a.end()
#define fast ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define INF 10000000000000000
#define input freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout)
#define endl "\n"
#define INT_M 1000000007
#define SET(n) cout << fixed << setprecision(n)
#define fo(i, j, n) for (ll i = j; i < n; ++i)
#define dbg(x) cout << #x << ": " << x << endl;
vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}

const int N = 1e5 + 10;
// matrix chain multiplication
// Format of MCM (BACKBONE OF THE CODE)
int solve(int arr[],int i,int j){
    // Base condition (think of the invalid input)
    if(i>j) return 0;
    int ans = 0;
    for(int k = i;k<j;k++)
    {
        // calculate temporary ans
        // ... break the ans into temp ans
        int tmp_ans = solve(arr,i,k) + solve(arr,k+1,j); // operator like 
        ans = max(ans,tmp_ans); // have a function to choose final ans from temporary ans
    }
    return ans;
}
void best()
{
    
}
signed main()
{
    fast;
    ll T=1;
    cin>>T;
    while (T--)
    {  
        best();
    }
}