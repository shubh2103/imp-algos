
*** Form PRE-ORDER and IN-ORDER***
int search(int inorder[], int start, int end, int curr)
{
    for (int i = start; i <= end; i++) {
        if (inorder[i] == curr) {
            return i;
        }
    }
    return -1;
}
node* buildtree(int preorder[], int inorder[], int start, int end)
{
    static int idx = 0;
    if (start > end) return NULL;
    int curr = preorder[idx];
    idx++;
    node* root = new node(curr);
    if (start == end) return root;
    int pos = search(inorder, start, end, curr);
    root->left = buildtree(preorder, inorder, start, pos - 1);
    root->right = buildtree(preorder, inorder, pos + 1, end);

    return root;
}
*************************************************************************************************************************

*** From POST-ORDER and IN-ORDER***

node* buildtree(int postorder[], int inorder[], int start, int end)
{
    static int idx = end;
    if (start > end) return NULL;
    int curr = postorder[idx];
    idx--;
    node* root = new node(curr);
    if (start == end) return root;
    int pos = search(inorder, start, end, curr);
    root->right = buildtree(postorder, inorder, pos + 1, end);
    root->left = buildtree(postorder, inorder, start, pos - 1);
    return root;
}
    
***************************************************************************************************************************

WE cannot build a binary tree from pre-order and post-order untill it is a complete binary tree(having all the levels filled completely).